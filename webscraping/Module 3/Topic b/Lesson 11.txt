Lesson 11

Lesson 11

M3

M3

NYS COMMON CORE MATHEMATICS CURRICULUM

NYS COMMON CORE MATHEMATICS CURRICULUM













  

  



ALGEBRA I

ALGEBRA I

		

		



Lesson 11:  The Graph of a Function



Classwork

In Module 1, you graphed equations such as  by plotting the points in the Cartesian plane by picking 
-values and then using the equation to find the -value for each -value.  The number of ordered pairs you plotted to get the general shape of the graph depended on the type of equation (linear, quadratic, etc.).  The graph of the equation was then a representation of the solution set, which could be described using set notation.

In this lesson, we extend set notation slightly to describe the graph of a function.  In doing so, we explain a way to think about set notation for the graph of a function that mimics the instructions a tablet or laptop might perform to draw a graph on its screen.



Exploratory Challenge 1

Computer programs are essentially instructions to computers on what to do when the user (you!) makes a request.  For example, when you type a letter on your smart phone, the smart phone follows a specified set of instructions to draw that letter on the screen and record it in memory (as part of an email, for example).  One of the simplest types of instructions a computer can perform is a for-next loop.  Below is code for a program that prints the first  powers of :

Declare  integer
For all  from 1 to 5
	Print 
Next 



The output of this program code is







Here is a description of the instructions:  First,  is quantified as an integer, which means the variable can only take on integer values and cannot take on values like  or .  The For statement begins the loop, starting with .  The instructions between For and Next are performed for the value , which in this case is just to Print .  (Print means “print to the computer screen.”)  Then the computer performs the instructions again for the next  (), that is, 
Print , and so on until the computer performs the instructions for , that is, Print .

	


Exercise 1

Perform the instructions in the following programming code as if you were a computer and your paper was the computer screen.

Declare  integer
For all  from 2 to 8
	Print 
Next 



















Exploratory Challenge 2

We can use almost the same code to build a set:  First, we start with a set with zero elements in it (called the empty set), and then we increase the size of the set by appending one new element to it in each for-next step. 

Declare  integer
Initialize  as {}
For all  from  to 
	Append  to 
	Print 
Next 



Note that  is printed to the screen after each new number is appended.  Thus, the output shows how the set builds:







.






Exercise 2

We can also build a set by appending ordered pairs.  Perform the instructions in the following programming code as if you were a computer and your paper were the computer screen (the first few are done for you). 

Declare  integer
Initialize  as {}
For all  from  to 
	Append  to 
Next 
Print 



Output:
{, , ________________________________________}







Exploratory Challenge 3

Instead of Printing the set  to the screen, we can use another command, Plot, to plot the points on a Cartesian plane. 

Declare  integer
Initialize  as {}
For all  from  to 
	Append  to 
Next 
Plot 

Output:




















In mathematics, the programming code above can be compactly written using set notation, as follows:



This set notation is an abbreviation for “The set of all points  such that  is an integer and .”  Notice how the set of ordered pairs generated by the for-next code above, 



also satisfies the requirements described by .  It is for this reason that the set notation of the form 



is sometimes called set-builder notation—because it can be thought of as building the set just like the for-next code. 



Discussion

We can now upgrade our notion of a for-next loop by doing a thought experiment:  Imagine a for-next loop that steps through all real numbers in an interval (not just the integers).  No computer can actually do this—computers can only do a finite number of calculations.  But our human brains are far superior to that of any computer, and we can easily imagine what that might look like.  Here is some sample code:

Declare  real
Let 
Initialize  as {}
For all  such that 
	Append  to 
Next 
Plot 


The output of this thought code is the graph of  for all real numbers  in the interval :




Exercise 3

Plot the function  on the Cartesian plane using the following for-next thought code.



Declare  real
Let 
Initialize  as {}
For all  such that 
	Append  to 
Next 
Plot 



        









For each step of the for-next loop, what is the input value? 









For each step of the for-next loop, what is the output value?









What is the domain of the function ? 









What is the range of the function ? 







Closing

The set  built from the for-next thought code in Exercise 4 can also be compactly written in mathematics using set notation:



When this set is thought of as plotted in the Cartesian plane, it is the same graph.  When you see this set notation in the Problem Set and/or future studies, it is helpful to imagine this set-builder notation as describing a for-next loop. 

In general, if  is a function with domain , then its graph is the set of all ordered pairs,



thought of as a geometric figure in the Cartesian coordinate plane.  (The symbol  simply means “in.”  The statement
 is read, “ in .”)























































Problem Set 



Perform the instructions for each of the following programming codes as if you were a computer and your paper was the computer screen.

 

Declare  integer
For all  from  to 
	Print 
Next 



Lesson Summary

Graph of :  Given a function  whose domain  and range are subsets of the real numbers, the graph of  is the set of ordered pairs in the Cartesian plane given by





Lesson Summary

Graph of :  Given a function  whose domain  and range are subsets of the real numbers, the graph of  is the set of ordered pairs in the Cartesian plane given by







Declare  integer
For all  from to 
	Print 
Next 





Declare  integer
For all  from  to 
	Print 
Next 



Declare  integer
For all  from  to 
	Print 
Next 

	

	

	

Perform the instructions for each of the following programming codes as if you were a computer and your paper were the computer screen.



Declare  integer
Let 
Initialize  as {}
For all  from  to 
	Append  to 
Next 
Plot 



Declare  integer
Let 
Initialize  as {}
For all  from  to 
	Append  to 
Next 
Plot 



Declare  real
Let 
Initialize  as {}
For all  such that 
	Append  to 
Next 
Plot 






Answer the following questions about the thought code:

Declare  real
Let 
Initialize  as {}
For all  such that 
	Append  to 
Next 
Plot 

What is the domain of the function ?  

Plot the graph of  according to the instructions in the thought code.

Look at your graph of .  What is the range of ? 

Write three or four sentences describing in words how the thought code works.



Sketch the graph of the functions defined by the following formulas, and write the graph of  as a set using set-builder notation.  (Hint:  Assume the domain is all real numbers unless specified in the problem.) 











, 

, 

, 



The figure shows the graph of .



Find the value of . 

If the graph of  intersects the -axis at , find the coordinates of .  

The figure shows the graph of .




Find the value of . 

If the graph of  intersects the -axis at , find the coordinates of .  

Find the area of triangle .  



This work is derived from Eureka Math ™ and licensed by Great Minds. ©2015  Great Minds. eureka-math.org This file derived from ALG I-M3-TE-1.3.0-08.2015



This work is derived from Eureka Math ™ and licensed by Great Minds. ©2015  Great Minds. eureka-math.org This file derived from ALG I-M3-TE-1.3.0-08.2015



This work is licensed under a 
Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. 

This work is licensed under a 
Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. 

S.61

S.61

	Lesson 11:	The Graph of a Function

	

	

	

	Lesson 11:	The Graph of a Function